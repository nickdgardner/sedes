#!/usr/bin/env python
# coding: utf-8

import cgi
import codecs
import getopt
import math
import sys
import unicodedata

from greek import *

class Line(object):
    def __init__(self, lineno, text):
        self.lineno = lineno
        self.text = text
        self.entropy = None

    def html(self):
        return cgi.escape(nfc(self.text).encode("utf-8"), True).replace(" ", "&nbsp;")

# Is this a word we want to consider?
WORD_BLACKLIST = set([u"τε", u"τ’"])
def admit_word(word):
    return word.lower() not in WORD_BLACKLIST

def entropy(a):
    sum = 0.0
    for x in set(a):
        p = float(a.count(x)) / len(a)
        sum += -p * math.log(p, 2)
    return sum

def nfc(u):
    return unicodedata.normalize("NFC", u)

def extract_window(lines, i, j):
    window = []
    # Cheat on the first and last line.
    if i == -1:
        i += 1
        j += 1
    elif j == len(lines):
        i -= 1
        j -= 1
    for n in range(i, j+1):
        if 0 <= n < len(lines):
            window.append(lines[n].text)
    return "".join(window)

def lineno_anchor(lineno):
    return "l%d" % lineno

def pct(f):
    return "%.f%%" % (f * 100)

def barchart(f):
    return "<table width=800 height=24 cellpadding=0 cellspacing=0><tr><td width=%s bgcolor=blue>&nbsp;</td><td></td></tr></table>" % esc(pct(max(f, 0.01)))

def esc(s):
    return cgi.escape(s, True)

opts, args = getopt.gnu_getopt(sys.argv[1:], "")

input_filename, = args

lines = []
with codecs.open(input_filename, encoding="utf-8") as f:
    for n, text in enumerate(f):
        lines.append(Line(n+1, text.strip()))

for i in range(len(lines)):
    window = extract_window(lines, i-1, i+1)
    words = [word for word in window.split() if admit_word(word)]
    initial_letters = [word[0] for word in words]
    lines[i].entropy = entropy(initial_letters) / len(words)

print """\
<!DOCTYPE html>
<html>
<head>
<meta charset=utf-8>
<style>
table {
    cell-spacing: 0;
    cell-padding: 0;
}
</style>
</head>
<body>
"""

sorted_entropy = sorted(lines, key=lambda l: l.entropy)
min_entropy = sorted_entropy[0].entropy
max_entropy = sorted_entropy[-1].entropy

print """\
<h2>Index of lines with least entropy</h2>
<table cellpadding=2 cellspacing=0>
<tr>
<th align=right>#</th>
<th align=left>line</th>
<th align=left colspan=2>mean entropy</th>
<th></th>
</tr>
<tbody>
"""

for line in sorted_entropy[:10]:
    print "<tr>"
    print "<td align=right><a href=\"#%s\">%d</a></td>" % (esc(lineno_anchor(line.lineno)), line.lineno)
    print "<td align=left>%s</td>" % line.html()
    print "<td align=right>%.3f</td>" % line.entropy
    print "<td style='padding: 0'>%s</td>" % barchart((line.entropy-min_entropy) / (max_entropy-min_entropy))
    print "</tr>"


print """\
</tbody>
</table>
"""

print """\
<h2>Poem</h2>
<table cellpadding=2 cellspacing=0>
<tr>
<th align=right>#</th>
<th align=left>line</th>
<th align=left colspan=2>mean entropy</th>
<th></th>
</tr>
"""

for line in lines:
    print "<tr id=\"%s\">" % esc(lineno_anchor(line.lineno))
    print "<td align=right><a href=\"#%s\">%d</a></td>" % (esc(lineno_anchor(line.lineno)), line.lineno)
    print "<td align=left>%s</td>" % line.html()
    print "<td align=right>%.3f</td>" % line.entropy
    print "<td style='padding: 0'>%s</td>" % barchart((line.entropy-min_entropy) / (max_entropy-min_entropy))
    print "</tr>"

print """\
</table>
"""

print """\
</body>
</html>
"""
