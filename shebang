#!/usr/bin/env python3

import codecs
import csv
import getopt
import os.path
import re
import subprocess
import sys

def usage(f=sys.stdout):
    f.write("""\
Usage: %s [<LINENO><WORD>.html]...
""")

WORKS = (
    "Il.",
    "Od.",
    "Hymns",
    "Theog.",
    "WD",
    "Shield",
    "Fr.",
    "Ap.Rh.",
    "Theoc.",
    "Call.",
    "Aratus",
)

csv_writer = csv.DictWriter(codecs.getwriter("utf-16")(sys.stdout.buffer), fieldnames=(
    "Line #",
    "Word",
    "TLG search",
    "Sedes",
    "Total (Diogenes)",
    "Il.",
    "Od.",
    "Hymns",
    "Theog.",
    "WD",
    "Shield",
    "Fr.",
    "Ap.Rh.",
    "Theoc.",
    "Call.",
    "Aratus",
    "Notes",
    "Fixed for '?'",
    "Il. total",
    "Od. total",
    "Hymns total",
    "Theog. total",
    "WD total",
    "Shield total",
    "Fr. total",
    "Ap.Rh. total",
    "Theoc. total",
    "Call. total",
    "Aratus total",
))

def metricalposition(filename):
    p = subprocess.Popen(["./metricalposition", filename], stdout=subprocess.PIPE)
    return p.stdout

def process(filename):
    m = re.match(r'^(\d+)(.+)\.html$', os.path.basename(filename))
    line_num = int(m.group(1))
    word = m.group(2)
    row = {
        "Line #": line_num,
        "Word": word,
        "Fixed for '?'": "Yes",
    }
    for work in WORKS:
        row.setdefault(work, 0)
        row.setdefault(work + " total", 0)

    possible_sedes = set()

    position_counts = {}
    total_counts = {}
    for line in metricalposition(filename):
        work, lineno, positions, _, _ = line.decode("utf-8").strip().split("\t")
        positions = set(positions.split("/"))
        total_counts.setdefault(work, 0)
        total_counts[work] += 1
        for pos in positions:
            if pos == "?":
                row["Fixed for '?'"] = "No"
            position_counts.setdefault(pos, {})
            position_counts[pos].setdefault(work, 0)
            position_counts[pos][work] += 1

            if work == "Shield" and lineno == str(line_num):
                possible_sedes.add(pos)

    if len(possible_sedes) == 1:
        sedes = possible_sedes.pop()
        row["Sedes"] = sedes
        for work, count in position_counts[sedes].items():
            row[work] = count

    for work, count in total_counts.items():
        row[work + " total"] = count

    csv_writer.writerow(row)
    sys.stdout.flush()

opts, filenames = getopt.gnu_getopt(sys.argv[1:], "-h", ["help"])
for o, a in opts:
    if o == "-h" or o == "--help":
        usage()
        sys.exit()

csv_writer.writeheader()

for filename in filenames:
    process(filename)
