#!/usr/bin/env python3

# Usage: ./join-expectancy corpus/work.csv expectancy.all.csv > joined.csv
#
# Outputs work.csv, augmented with rows from expectancy.all.csv that match in
# the "lemma" and "sedes" columns (left outer join).

import csv
import getopt
import sys

def usage(file = sys.stdout):
    print(f"""\
Usage: {sys.argv[0]} WORK.CSV EXPECTANCY.CSV > JOINED.CSV

Outputs the contents of WORK.CSV, augmented with the rows from EXPECTANCY.CSV
that match on the "lemma" and "sedes" columns.
""", end="", file=file)

COMMON_FIELDS = ("lemma", "sedes")

def unique(s):
    result = []
    for x in s:
        if x not in result:
            result.append(x)
    return result

def join(left, right, fieldnames, output):
    left = csv.DictReader(left)
    right = csv.DictReader(right)
    output = csv.DictWriter(output, fieldnames = unique(left.fieldnames + right.fieldnames))
    output.writeheader()

    lookup = {}
    for row in right:
        key = tuple(row[x] for x in fieldnames)
        lookup.setdefault(key, [])
        lookup[key].append(row)

    for row in left:
        key = tuple(row[x] for x in fieldnames)
        matches = lookup.get(key)
        if not matches:
            # If no matches, output the row unmodified (with empty strings for
            # the missing fields).
            output.writerow(row)
        else:
            for match in matches:
                output.writerow({**row, **match})

opts, args = getopt.gnu_getopt(sys.argv[1:], "h", ["help"])
for o, _ in opts:
    if o in ("-h", "--help"):
        usage()
        sys.exit(0)

work_filename, expectancy_filename = args
with open(work_filename) as work:
    with open(expectancy_filename) as expectancy:
        join(work, expectancy, COMMON_FIELDS, sys.stdout)
