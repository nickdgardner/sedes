#!/usr/bin/env python3

# Extracts words and their sedes from a TEI XML document and writes the words to
# standard output as CSV, one row per word.
#
# Usage:
#   tei2csv IDENTIFIER FILENAME.xml > FILENAME.csv
# IDENTIFIER is a short text identifier for the work that will be copied to the
# output; e.g., "Il.". FILENAME.xml is the name of the XML document containing
# the text of the work.

import csv
import getopt
import re
import sys

import lemma
import sedes
import tei

def usage(file=sys.stdout):
    print("""\
Usage: {} IDENTIFIER FILENAME.xml > FILENAME.csv

IDENTIFIER is a short text identifier for the work; e.g., "Il.".
FILENAME.XML is a TEI XML document containing the text of the work.
""".format(sys.argv[0]), end="", file=file)

def extract_words(s):
    return re.findall("[\\w\u0313\u0314\u0301\u0342\u0300\u0308\u0345\u0323\u2019]+", s)

def assign_sedes_for_line(line):
    """From a line, return a sequence of (word, sedes, num_scansions) tuples.
    sedes will be non-blank if and only if num_scansions is equal to 1."""
    assignments = sedes.analyze(line)
    if len(assignments) == 1:
        return tuple((word, sedes, shape, len(assignments)) for (word, sedes, shape) in assignments[0])
    else:
        # If no scansions or multiple scansions, output "".
        return tuple((word, "", "", len(assignments)) for word in extract_words(line))

def process(f):
    global csv_w, work_identifier
    doc = tei.TEI(f)
    for line in doc.lines():
        if line.text in sedes.KNOWN_SCANSIONS:
            scanned = "manual"
        else:
            scanned = "auto"
        for word_n, entry in enumerate(assign_sedes_for_line(line.text)):
            word, pos, shape, num_scansions = entry
            csv_w.writerow({
                "work": work_identifier,
                "book_n": line.book_n,
                "line_n": line.line_n,
                "word_n": word_n + 1,
                "word": word,
                "scanned": scanned,
                "num_scansions": num_scansions,
                "sedes": pos,
                "metrical_shape": shape,
                "lemma": lemma.lookup(word, ""),
            })

opts, args = getopt.gnu_getopt(sys.argv[1:], "h", ["help"])
for o, a in opts:
    if o in ("-h", "--help"):
        usage()
        sys.exit(0)

try:
    work_identifier, input_filename = args
except ValueError:
    print("error: usage error", file=sys.stderr)
    print(file=sys.stderr)
    usage(sys.stderr)
    sys.exit(1)

csv_w = csv.DictWriter(
    sys.stdout,
    [
        "work",
        "book_n",
        "line_n",
        "word_n",
        "word",
        "scanned",
        "num_scansions",
        "sedes",
        "metrical_shape",
        "lemma",
    ],
    lineterminator="\n",
)
csv_w.writeheader()
with open(input_filename) as f:
    process(f)
