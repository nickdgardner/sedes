#!/usr/bin/env python

import bs4
import getopt
import sys

import beta

class Context(object):
    def __init__(self, outfile):
        self.outfile = outfile
        self.lineno = 0
        self.parts = []

    def check_lineno(self, elem):
        n = elem.get("n")
        if n is not None:
            try:
                n = int(n)
            except ValueError:
                print >> sys.stderr, "warning: cannot parse line number %r" % n
                return
            if self.lineno != n:
                print >> sys.stderr, "warning: expected line %d on line %d" % (self.lineno, n)
                self.lineno = n

    def add_beta(self, betacode):
        self.parts.append(beta.decode(betacode))

    def line_sep(self):
        line = u"".join(self.parts).strip()
        if line:
            self.outfile.write((line + u"\n").encode("utf-8"))
        self.lineno += 1
        self.parts = []

def convert_elem(soup, ctx):
    for elem in soup.children:
        if type(elem) == bs4.element.Tag:
            if elem.name in ("div1",):
                ctx.lineno = 0
                convert_elem(elem, ctx)
            elif elem.name in ("q", "sp", "del"):
                convert_elem(elem, ctx)
            elif elem.name in ("milestone", "add"):
                pass
            elif elem.name in ("l", "lb"):
                ctx.line_sep()
                ctx.check_lineno(elem)
                convert_elem(elem, ctx)
            elif elem.name in ("p",):
                convert_elem(elem, ctx)
            else:
                raise ValueError("don't understand element %r" % elem.name)
        elif type(elem) == bs4.element.Comment:
            pass
        else:
            ctx.add_beta(unicode(elem))

def convert(infile, outfile):
    soup = bs4.BeautifulSoup(infile, "xml")
    ctx = Context(outfile)
    convert_elem(soup.find("text").find("body"), ctx)
    ctx.line_sep()

def input_files(args):
    if len(args) == 0:
        yield sys.stdin
        return
    for arg in args:
        with open(arg) as f:
            yield f

opts, args = getopt.gnu_getopt(sys.argv[1:], "")
for f in input_files(args):
    convert(f, sys.stdout)
