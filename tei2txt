#!/usr/bin/env python

import bs4
import getopt
import sys

import beta

class Context(object):
    def __init__(self, outfile):
        self.outfile = outfile
        self.lineno = 0

    def check_lineno(self, elem):
        n = elem.get("n")
        if n is not None:
            n = int(n)
            if self.lineno != n:
                print >> sys.stderr, "warning: expected line %d on line %d" % (self.lineno, n)
                self.lineno = n

def extract_text(soup):
    parts = []
    for x in soup.children:
        if type(x) == bs4.element.Tag:
            if x.name in ("milestone",):
                pass
            else:
                raise ValueError("don't understand element %r" % x.name)
        elif type(x) == bs4.element.Comment:
            pass
        else:
            parts.append(unicode(x))
    return u"".join(parts)

def convert_elem(soup, ctx):
    for elem in soup.find_all():
        if elem.name in ("div1",):
            ctx.lineno = 0
        elif elem.name in ("milestone", "q"):
            pass
        elif elem.name in ("l",):
            betacode = extract_text(elem)
            text = beta.decode(betacode)
            ctx.outfile.write((text + u"\n").encode("utf-8"))

            ctx.lineno += 1
            ctx.check_lineno(elem)
        else:
            raise ValueError("don't understand element %r" % elem.name)

def convert(infile, outfile):
    soup = bs4.BeautifulSoup(infile, "xml")
    ctx = Context(outfile)
    return convert_elem(soup.find("text").find("body"), ctx)

def input_files(args):
    if len(args) == 0:
        yield sys.stdin
        return
    for arg in args:
        with open(arg) as f:
            yield f

opts, args = getopt.gnu_getopt(sys.argv[1:], "")
for f in input_files(args):
    convert(f, sys.stdout)
